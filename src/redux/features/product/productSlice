import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
// import { ICartProduct } from "../../../models/models";


interface ProductState {
  id: number;
  title: string;
  price: number;
  quantity: number;  
}
const initialState: ProductState = {
  id: 0,
  title: "",
  price: 0,
  quantity: 0,
  
}


// export const addProductToCart = createAsyncThunk(
//   "product/addProductToCart",
//   async (data: ProductData, { rejectWithValue }) => {
//     try {
//       const token = localStorage.getItem("token");

//       const response = await fetch(`${import.meta.env.VITE_CARTS}`, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Authorization: `Bearer ${token}`,
//         },
//         body: JSON.stringify({
//           productId: data.productId,
//           quantity: data.quantity,
//         }),
//       });

//       if (!response.ok) {
//         throw new Error("Could not add product to cart");
//       }

//       return await response.json();
//     } catch (err: unknown) {
//       if (err instanceof Error) {
//         return rejectWithValue(err.message);
//       } else {
//         return rejectWithValue("Something went wrong");
//       }
//     }
//   },
// );

// export const removeProductFromCart = createAsyncThunk(
//   "product/removeProductFromCart",
//   async (productId: number, { rejectWithValue }) => {
//     try {
//       const token = localStorage.getItem("token");

//       const response = await fetch(`${import.meta.env.VITE_CARTS}/${productId}`, {
//         method: "DELETE",
//         headers: {
//           "Content-Type": "application/json",
//           Authorization: `Bearer ${token}`,
//         },
//         body: JSON.stringify({
//           productId: productId,
//         }),
//       });

//       if (!response.ok) {
//         throw new Error("Could not remove product from cart");
//       }

//       return await response.json();
//     } catch (err: unknown) {
//       if (err instanceof Error) {
//         return rejectWithValue(err.message);
//       } else {
//         return rejectWithValue("Something went wrong");
//       }
//     }
//   },
// );

// export const updateProductQuantity = createAsyncThunk(
//   "product/updateProductQuantityInCart",
//   async (data: ProductData, { rejectWithValue }) => {
//     try {
//       const token = localStorage.getItem("token");

//       const response = await fetch(`${import.meta.env.VITE_CARTS}/${data.productId}`, {
//         method: "PATCH",
//         headers: {
//           "Content-Type": "application/json",
//           Authorization: `Bearer ${token}`,
//         },
//         body: JSON.stringify({
//           productId: data.productId,
//           quantity: data.quantity,
//         }),
//       });

//       if (!response.ok) {
//         throw new Error("Could not update product quantity in cart");
//       }

//       return await response.json();
//     } catch (err: unknown) {
//       if (err instanceof Error) {
//         return rejectWithValue(err.message);
//       } else {
//         return rejectWithValue("Something went wrong");
//       }
//     }
//   },
// );

export const productSlice = createSlice({
  name: "product",
  initialState,
  reducers: {
    addProductInCart: (state, action: PayloadAction<ICart>) => {
      state.product = action.payload;
    },
    removeProductFromCart: (state, action: PayloadAction<ICart>) => {
      state.product = action.payload;
    },
    updateProductQuantityInCart: (state, action: PayloadAction<ICart>) => {
      state.product = action.payload;
    },
  },  
});
  // reducers: {
  //   addProduct: (state, action: PayloadAction<ICartProduct>) => {
  //     state.id = action.payload.id;
  //     state.title = action.payload.title;
  //     state.price = action.payload.price;
  //     state.quantity = action.payload.quantity;
  //     state.total = action.payload.total;
  //     state.discountPercentage = action.payload.discountPercentage;
  //     state.discountedTotal = action.payload.discountedTotal;
  //     state.thumbnail = action.payload.thumbnail;
  //   },
  //   deleteProduct: (state) => {
  //     state.id = 0;
  //     state.title = "";
  //     state.price = 0;
  //     state.quantity = 0;
  //     state.total = 0;